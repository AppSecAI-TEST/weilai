package com.chinamobo.ue.activity.dao;

import java.util.List;
import java.util.Map;

import com.chinamobo.ue.activity.common.BaseDao;
import com.chinamobo.ue.activity.dto.TomCompletedActDto;
import com.chinamobo.ue.activity.entity.TomActivityProperty;

public interface TomActivityPropertyMapper {//extends BaseDao<TomActivityProperty>{
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TOM_ACTIVITY_PROPERTY
     *
     * @mbggenerated
     */
    int insert(TomActivityProperty record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TOM_ACTIVITY_PROPERTY
     *
     * @mbggenerated
     */
    int insertSelective(TomActivityProperty record);
    
    /**
     * 
     * ������������ѯ�γ�����ѧϰʱ��
     *
     * �����ߣ�ZXM
     * ����ʱ��: 2016��3��30������2:58:13
     * @param map
     * @return
     */
    TomActivityProperty selectByNewDate(Map<Object, Object> map);
   
    /**
     * 
     * 功能描述：根据课程id和活动id查询活动配置
     *
     * 创建者：ZXM
     * 创建时间: 2016年4月8日下午5:17:47
     * @param map
     * @return
     */
    TomActivityProperty selectByCourseIdAndActivityId(Map<Object, Object> map);
    
    int updateByPrimaryKeySelective(TomActivityProperty record);

	List<TomActivityProperty> selectByTaskPackageId(Integer packageId);

	/**
	 * 
	 * 功能描述：[根据条件查询]
	 *
	 * 创建者：JCX
	 * 创建时间: 2016年5月25日 下午8:39:14
	 * @param activityId
	 * @return
	 */
	List<TomActivityProperty> selectByExample(TomActivityProperty example);

	/**
	 * 
	 * 功能描述：[根据活动ID删除]
	 *
	 * 创建者：JCX
	 * 创建时间: 2016年5月25日 下午4:01:30
	 * @param activityId
	 */
	void deleteByActivityId(Integer activityId);
	
	List<TomActivityProperty> InquiryActivityCurriculum(Map<Object, Object> map);
	
	List<TomActivityProperty> InquiryActivityBycodes(Map<Object, Object> map);
	
	int countByExample(Map<Object, Object> map);
	
	List<TomActivityProperty> selectByActivityId(int activityId);
	
	TomActivityProperty selectTask(TomActivityProperty example);
	
	TomActivityProperty selectExamBySort(TomActivityProperty example);
	//根据活动查考试id
	List<TomActivityProperty> selectByActivity(int activityId);
	 /** 功能描述：[根据课程与人员查询正在进行的活动 ]
	 *
	 * 创建者：cjx
	 * 创建时间: 2017年3月10日 下午3:18:33
	 * @param map
	 * @return
	 */
	List<TomActivityProperty>selectByCourseAndCodeMessage(Map<Object, Object> map);
	
	/**
	 * 
	 * 功能描述：[根据考试与人员查询正在进行的活动 ]
	 *
	 * 创建者：cjx
	 * 创建时间: 2017年3月10日 下午3:18:33
	 * @param map
	 * @return
	 */
	List<TomActivityProperty>selectByExamAndCodeMessage(Map<Object, Object> map);
	/**
	 *  
	 * 功能描述：[根据排序查询后续任务]
	 *
	 * 创建者：cjx
	 * 创建时间: 2017年3月10日 下午3:18:24
	 * @param map
	 * @return
	 */
	List<TomActivityProperty>selectBySortMessqge(Map<Object, Object> map);
	//根据活动id和考试id查所有数据
	List<TomActivityProperty> selectByAcExam(Map<Object, Object> map);
	

	
	TomActivityProperty selectBeforeTask (Map<Object, Object> map);

	//int selectByActivity(int activityId);

	TomActivityProperty  selectByExamId(Integer id);
	List<TomActivityProperty>  selectByList(Integer examId);
	
	void updateByCourseId (TomActivityProperty example);
	/**
	 * 查询完成活动人数
	 * Acemon
	 * 2017-05-10
	 */
	//查询活动下任务总数
	int countAllTask(Integer activityId);
	//查询活动下的课程数
	int countCourse(Integer activityId);
	//查询活动下的考试数
	int countExam(Integer activityId);
	//查询学习完活动下的课程人数
	int countActCourse(Map<Object, Object> map);
	//查询线下课程签到人员
	int countOfflineCourse(Map<Object, Object> map);
	//查询通过完活动下的考试人数
	int countActExam(Map<Object, Object> map);
	//查询学习完活动下课程的人
	List<TomCompletedActDto> selectByActId(Integer activityId);
	//查询和判断完成活动的人
	List<TomCompletedActDto> selectByActCode(Map<Object, Object> map);
}