<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.chinamobo.ue.activity.dao.TomActivityPropertyMapper" >
  <resultMap id="BaseResultMap" type="com.chinamobo.ue.activity.entity.TomActivityProperty" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="ACTIVITY_ID" property="activityId" jdbcType="DECIMAL" />
    <result column="PACKAGE_ID" property="packageId" jdbcType="DECIMAL" />
    <result column="SORT" property="sort" jdbcType="DECIMAL" />
    <result column="START_TIME" property="startTime" jdbcType="TIMESTAMP" />
    <result column="END_TIME" property="endTime" jdbcType="TIMESTAMP" />
    <result column="LECTURERS" property="lecturers" jdbcType="VARCHAR" />
    <result column="COURSE_ID" property="courseId" jdbcType="DECIMAL" />
    <result column="COURSE_ADDRESS" property="courseAddress" jdbcType="VARCHAR" />
    <result column="COURSE_TIME" property="courseTime" jdbcType="DECIMAL" />
    <result column="UNIT_PRICE" property="unitPrice" jdbcType="DECIMAL" />
    <result column="TOTAL_PRICE" property="totalPrice" jdbcType="DECIMAL" />
    <result column="EXAM_NAME" property="examName" jdbcType="VARCHAR" />
    <result column="EXAM_ID" property="examId" jdbcType="DECIMAL" />
    <result column="EXAM_TIME" property="examTime" jdbcType="DECIMAL" />
    <result column="RETAKING_EXAM_TIMES" property="retakingExamTimes" jdbcType="DECIMAL" />
    <result column="OFFLINE_EXAM" property="offlineExam" jdbcType="VARCHAR" />
    <result column="PRE_TASK" property="preTask" jdbcType="VARCHAR" />
    <result column="CREATOR" property="creator" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="OPERATOR" property="operator" jdbcType="VARCHAR" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="COURSE_ONLINE" property="courseOnline" jdbcType="VARCHAR" />
     <result column="SIGN_IN_TWO_DIMENSION_CODE" property="signInTwoDimensionCode" jdbcType="VARCHAR" />
    <result column="GRADE_TWO_DIMENSION_CODE" property="gradeTwoDimensionCode" jdbcType="VARCHAR" />
    <result column="ACTIVITY_START_TIME" property="activityStartTime" jdbcType="TIMESTAMP" />
    <result column="ACTIVITY_END_TIME" property="activityEndTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap type="com.chinamobo.ue.activity.dto.TomCompletedActDto" id="ResultMap1">
    <result column="CODE" property="code" jdbcType="VARCHAR" />
    <result column="COURSE_ID" property="courseId" jdbcType="DECIMAL" />
    <result column="TOTAL_TASK" property="totalTask" jdbcType="DECIMAL" />
    <result column="COMPLETED_TASK" property="completedTask" jdbcType="DECIMAL" />
    <result column="NAME" property="name" jdbcType="VARCHAR" />
    <result column="JOBNAME" property="jobname" jdbcType="VARCHAR" />
    <result column="SECRET_EMAIL" property="secretEmail" jdbcType="VARCHAR" />
    <result column="MOBILE" property="mobile" jdbcType="VARCHAR" />
  </resultMap>
  <insert id="insert" parameterType="com.chinamobo.ue.activity.entity.TomActivityProperty" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into TOM_ACTIVITY_PROPERTY (ACTIVITY_ID, PACKAGE_ID, SORT, 
      START_TIME, END_TIME, LECTURERS, 
      COURSE_ID, COURSE_ADDRESS, COURSE_TIME, 
      UNIT_PRICE, TOTAL_PRICE, EXAM_NAME, 
      EXAM_ID, EXAM_TIME, RETAKING_EXAM_TIMES, 
      OFFLINE_EXAM, PRE_TASK, CREATOR, 
      CREATE_TIME, OPERATOR, UPDATE_TIME,COURSE_ONLINE, SIGN_IN_TWO_DIMENSION_CODE, GRADE_TWO_DIMENSION_CODE
      )
    values (#{activityId,jdbcType=DECIMAL}, #{packageId,jdbcType=DECIMAL}, #{sort,jdbcType=DECIMAL}, 
      #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, #{lecturers,jdbcType=VARCHAR}, 
      #{courseId,jdbcType=DECIMAL}, #{courseAddress,jdbcType=VARCHAR}, #{courseTime,jdbcType=DECIMAL}, 
      #{unitPrice,jdbcType=DECIMAL}, #{totalPrice,jdbcType=DECIMAL}, #{examName,jdbcType=VARCHAR}, 
      #{examId,jdbcType=DECIMAL}, #{examTime,jdbcType=DECIMAL}, #{retakingExamTimes,jdbcType=DECIMAL}, 
      #{offlineExam,jdbcType=VARCHAR}, #{preTask,jdbcType=VARCHAR}, #{creator,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{operator,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP},
      #{courseOnline,jdbcType=VARCHAR}, #{signInTwoDimensionCode,jdbcType=VARCHAR}, #{gradeTwoDimensionCode,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.chinamobo.ue.activity.entity.TomActivityProperty" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into TOM_ACTIVITY_PROPERTY
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="activityId != null" >
        ACTIVITY_ID,
      </if>
      <if test="packageId != null" >
        PACKAGE_ID,
      </if>
      <if test="sort != null" >
        SORT,
      </if>
      <if test="startTime != null" >
        START_TIME,
      </if>
      <if test="endTime != null" >
        END_TIME,
      </if>
      <if test="lecturers != null" >
        LECTURERS,
      </if>
      <if test="courseId != null" >
        COURSE_ID,
      </if>
      <if test="courseAddress != null" >
        COURSE_ADDRESS,
      </if>
      <if test="courseTime != null" >
        COURSE_TIME,
      </if>
      <if test="unitPrice != null" >
        UNIT_PRICE,
      </if>
      <if test="totalPrice != null" >
        TOTAL_PRICE,
      </if>
      <if test="examName != null" >
        EXAM_NAME,
      </if>
      <if test="examId != null" >
        EXAM_ID,
      </if>
      <if test="examTime != null" >
        EXAM_TIME,
      </if>
      <if test="retakingExamTimes != null" >
        RETAKING_EXAM_TIMES,
      </if>
      <if test="offlineExam != null" >
        OFFLINE_EXAM,
      </if>
      <if test="preTask != null" >
        PRE_TASK,
      </if>
      <if test="creator != null" >
        CREATOR,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="operator != null" >
        OPERATOR,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
      <if test="signInTwoDimensionCode != null" >
        SIGN_IN_TWO_DIMENSION_CODE,
      </if>
      <if test="gradeTwoDimensionCode != null" >
        GRADE_TWO_DIMENSION_CODE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="activityId != null" >
        #{activityId,jdbcType=DECIMAL},
      </if>
      <if test="packageId != null" >
        #{packageId,jdbcType=DECIMAL},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=DECIMAL},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lecturers != null" >
        #{lecturers,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=DECIMAL},
      </if>
      <if test="courseAddress != null" >
        #{courseAddress,jdbcType=VARCHAR},
      </if>
      <if test="courseTime != null" >
        #{courseTime,jdbcType=DECIMAL},
      </if>
      <if test="unitPrice != null" >
        #{unitPrice,jdbcType=DECIMAL},
      </if>
      <if test="totalPrice != null" >
        #{totalPrice,jdbcType=DECIMAL},
      </if>
      <if test="examName != null" >
        #{examName,jdbcType=VARCHAR},
      </if>
      <if test="examId != null" >
        #{examId,jdbcType=DECIMAL},
      </if>
      <if test="examTime != null" >
        #{examTime,jdbcType=DECIMAL},
      </if>
      <if test="retakingExamTimes != null" >
        #{retakingExamTimes,jdbcType=DECIMAL},
      </if>
      <if test="offlineExam != null" >
        #{offlineExam,jdbcType=VARCHAR},
      </if>
      <if test="preTask != null" >
        #{preTask,jdbcType=VARCHAR},
      </if>
      <if test="creator != null" >
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="signInTwoDimensionCode != null" >
        #{signInTwoDimensionCode,jdbcType=VARCHAR},
      </if>
      <if test="gradeTwoDimensionCode != null" >
        #{gradeTwoDimensionCode,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <!-- ��ѯ�γ�����ѧϰʱ�� -->
  <select id="selectByNewDate" resultMap="BaseResultMap" parameterType="map" >
    select a.* from tom_activity_property a 
	left join tom_activity_emps_relation e on a.activity_id = e.activity_id 
	where e.code = #{code,jdbcType=VARCHAR} and a.course_id = #{courseId,jdbcType=DECIMAL}
	<if test="activityId != null">
		and a.ACTIVITY_ID = #{activityId, jdbcType=VARCHAR}
	</if>
	order by a.start_time desc
	 <![CDATA[limit 0,1]]>
	
	
  </select>
  <!-- 根据课程id与活动id查询活动配置 -->
  <select id="selectByCourseIdAndActivityId" resultMap="BaseResultMap" parameterType="map" >
    select * from tom_activity_property  
	where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL} and COURSE_ID = #{courseId,jdbcType=DECIMAL}
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="int" >
    select b.ACTIVITY_START_TIME,b.ACTIVITY_END_TIME,a.* from tom_activity_property a
    left join tom_activity b on a.activity_id=b.activity_id where 1=1
    <if test="activityId != null" >
       and a.ACTIVITY_ID = #{activityId,jdbcType=DECIMAL}
      </if>
      <if test="packageId != null" >
       and a.PACKAGE_ID=#{packageId,jdbcType=DECIMAL} 
      </if>
      <if test="examId != null" >
        and a.EXAM_ID=#{examId,jdbcType=DECIMAL}
      </if>
      <if test="courseId != null" >
        and a.COURSE_ID=#{courseId,jdbcType=DECIMAL}
      </if>
      <if test="sort != null" >
        and a.SORT=#{sort,jdbcType=DECIMAL}
      </if>
     order by a.SORT asc
  </select>
    <!-- updateByPrimaryKeySelective -->
    <select id="selectByTaskPackageId" resultMap="BaseResultMap" parameterType="int" >
    select * from tom_activity_property where PACKAGE_ID = #{packageId,jdbcType=DECIMAL}
  </select>
  <!-- 查询全部 -->
  <select id="InquiryActivityCurriculum" resultMap="BaseResultMap" parameterType="map">
    select DISTINCT a.*
  	from TOM_ACTIVITY_PROPERTY a,TOM_COURSES c where a.course_id is not null
  	and a.course_id=c.course_id
  	<if test="courseName != null" >
        and INSTR(c.COURSE_NAME,#{courseName,jdbcType=VARCHAR})>0
   </if>
   <if test="courseOnline != null" >
        and c.COURSE_ONLINE = #{courseOnline,jdbcType=VARCHAR}
   </if>
   <if test="beginTimeq != null and '' != beginTimeq">
		AND #{beginTimeq,jdbcType=TIMESTAMP} <![CDATA[<= Date(a.start_time)]]>
		</if>
		<if test="endTimeq != null and '' != endTimeq">
		and
		#{endTimeq,jdbcType=TIMESTAMP} <![CDATA[>= Date(a.start_time)]]>
		</if>
    order by a.CREATE_TIME desc 
    limit<![CDATA[
     #{startNum,jdbcType=DECIMAL},#{endNum,jdbcType=DECIMAL}]]>
     
  </select>
  <select id="InquiryActivityBycodes" resultMap="BaseResultMap" parameterType="map">
    select DISTINCT a.*
  	from TOM_ACTIVITY_PROPERTY a,TOM_COURSES c where a.course_id is not null
  	and a.course_id=c.course_id 
  	and a.activity_id  in 
  	<foreach collection="Ids" item="item" index="index"  open="(" separator="," close=")">
		 #{item}
	</foreach>
	and c.course_number in
  <foreach item="item" index="index" collection="codes" open="(" separator="," close=")">  
	  #{item}  
  </foreach> 
    order by a.CREATE_TIME desc 
  </select>
  <select id="countByExample" resultType="Integer" parameterType="map">
    select COUNT(*) from
  	(select DISTINCT a.*
  	from TOM_ACTIVITY_PROPERTY a,TOM_COURSES c where a.course_id is not null
  	and a.course_id=c.course_id
   <if test="courseName != null" >
        and INSTR(c.COURSE_NAME,#{courseName,jdbcType=VARCHAR})>0
   </if>
   <if test="courseOnline != null" >
        and c.COURSE_ONLINE = #{courseOnline,jdbcType=VARCHAR}
   </if>
   <if test="beginTimeq != null and '' != beginTimeq">
		AND #{beginTimeq,jdbcType=TIMESTAMP} <![CDATA[<= Date(a.start_time)]]>
		</if>
		<if test="endTimeq != null and '' != endTimeq">
		and
		#{endTimeq,jdbcType=TIMESTAMP} <![CDATA[>= Date(a.start_time)]]>
		</if>
   ) as a
  </select>
  <delete id="deleteByActivityId" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from tom_activity_property
    where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL}
  </delete>

  <select id="selectByActivityId" resultMap="BaseResultMap" parameterType="int">
  	select *
  	from TOM_ACTIVITY_PROPERTY   where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL}
  
  </select>
  
   <select id="selectTask" resultMap="BaseResultMap" parameterType="com.chinamobo.ue.activity.entity.TomActivityProperty">
  	select *
  	from TOM_ACTIVITY_PROPERTY   where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL} and sort=#{sort,jdbcType=DECIMAL}
  </select>
  <select id="selectByActivity" resultMap="BaseResultMap" parameterType="int">
     select * 
	from tom_activity_property where activity_id = #{activityId,jdbcType=DECIMAL} and course_id is null
  </select>
  <!-- 根据课程与人员查询正在进行的活动 -->  
  <select id="selectByCourseAndCodeMessage" resultMap="BaseResultMap" parameterType="map">
  	select ap.* from tom_courses c left join tom_activity_property ap on c.COURSE_ID=ap.COURSE_ID
	left join tom_activity a on a.ACTIVITY_ID=ap.ACTIVITY_ID left join tom_activity_emps_relation aer on a.ACTIVITY_ID = aer.ACTIVITY_ID
	where c.COURSE_ID= #{courseId,jdbcType=DECIMAL}  and aer.CODE= #{code,jdbcType=VARCHAR} and  a.ACTIVITY_START_TIME <![CDATA[ < now() and  now()< a.ACTIVITY_END_TIME]]>
  </select>
  <!-- 根据考试与人员查询正在进行的活动 -->  
  <select id="selectByExamAndCodeMessage" resultMap="BaseResultMap" parameterType="map">
  	select ap.* from tom_exam c left join tom_activity_property ap on c.EXAM_ID=ap.EXAM_ID
	left join tom_activity a on a.ACTIVITY_ID=ap.ACTIVITY_ID left join tom_activity_emps_relation aer on a.ACTIVITY_ID = aer.ACTIVITY_ID
	where c.EXAM_ID= #{examId,jdbcType=DECIMAL}  and aer.CODE= #{code,jdbcType=VARCHAR} and  a.ACTIVITY_START_TIME <![CDATA[ < now() and  now()< a.ACTIVITY_END_TIME]]>
  </select>
  
    <!-- 根据排序查询后续任务 -->  
  <select id="selectBySortMessqge" resultMap="BaseResultMap" parameterType="map">
  select ap.* from tom_activity_property ap where   INSTR(ap.PRE_TASK,#{pretask,jdbcType=VARCHAR})>0  and ap.ACTIVITY_ID=#{activityId,jdbcType=DECIMAL}
  </select>
  <!-- 根据活动id和考试id查所有数据 -->
  <select id="selectByAcExam" resultMap="BaseResultMap" parameterType="map">
     select * from tom_activity_property where activity_id = #{activityId,jdbcType=DECIMAL} and exam_id = #{examId,jdbcType=DECIMAL}
  </select>
  

  <select id="selectBeforeTask" resultMap="BaseResultMap" parameterType="map">
  	SELECT M.*,C.COURSE_ONLINE FROM (
	  	select  A.* from (
		  	select * from tom_activity_property where activity_id = #{activityId,jdbcType=DECIMAL} 
			<if test="examId != null" >
				and exam_id = #{examId,jdbcType=DECIMAL}
			</if>
			<if test="courseId != null" >
				and course_id = #{courseId,jdbcType=DECIMAL}
			</if>
		) S
		LEFT JOIN  tom_activity_property  A ON A.activity_id = S.activity_id AND S.pre_task = A.sort
	) M
	LEFT JOIN TOM_COURSES C ON C.COURSE_ID=M.COURSE_ID
  </select>

  <!-- 根据考试id查所有数据 -->
  <select id="selectByExamId" resultMap="BaseResultMap" parameterType="map">
     select * from tom_activity_property where  exam_id = #{examId,jdbcType=DECIMAL}
  </select>
  
  <select id="selectByList" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
     select * from tom_activity_property where  exam_id = #{examId,jdbcType=DECIMAL}
  </select>
  
  <update id="updateByCourseId" parameterType="com.chinamobo.ue.activity.entity.TomActivityProperty">
		update TOM_ACTIVITY_PROPERTY
		<set>
			<if test="startTime != null">
				START_TIME = #{startTime,jdbcType=TIMESTAMP},
			</if>
			<if test="endTime != null">
				END_TIME = #{endTime,jdbcType=TIMESTAMP}
			</if>
		</set>
		where COURSE_ID = #{courseId,jdbcType=DECIMAL}
	</update>
	<!-- 完成活动人数 -->
	<select id="countCourse" parameterType="java.lang.Integer" resultType="Integer">
	  select COUNT(course_id) from tom_activity_property WHERE ACTIVITY_ID = #{activityId,jdbcType=DECIMAL}
	</select>
	<select id="countExam" parameterType="java.lang.Integer" resultType="Integer">
	  select COUNT(exam_id) from tom_activity_property WHERE ACTIVITY_ID = #{activityId,jdbcType=DECIMAL}
	</select>
	<select id="countAllTask" parameterType="java.lang.Integer" resultType="Integer">
	  select COUNT(*) totalTask from tom_activity_property where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL}
	</select>
	<select id="countActCourse" parameterType="map" resultType="Integer">
		select ifnull(COUNT(DISTINCT l.`CODE`,l.COURSE_ID ),0) learningCourse
 		from tom_course_learning_record l where l.COURSE_ID in (select COURSE_ID from tom_activity_property where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL})
 		and l.code in (select code from tom_activity_emps_relation where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL})
 		and l.`CODE` = #{code,jdbcType=VARCHAR}
	</select>
	<select id="countOfflineCourse" parameterType="map" resultType="Integer">
		select ifnull(COUNT(DISTINCT l.`CODE`,l.COURSE_ID ),0) from tom_offline_sign l 
		where COURSE_ID in (select COURSE_ID from tom_activity_property where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL})
		and l.code in (select code from tom_activity_emps_relation where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL})
		and code = #{code,jdbcType=VARCHAR}
	</select>
	<select id="countActExam" parameterType="map" resultType="Integer">
		select ifnull(COUNT(DISTINCT l.`CODE`,l.EXAM_ID),0) passedExam
		from tom_exam_score l where EXAM_ID in (select EXAM_ID from tom_activity_property where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL})
		and l.code in (select code from tom_activity_emps_relation where ACTIVITY_ID = #{activityId,jdbcType=DECIMAL})
		and l.`CODE` = #{code,jdbcType=VARCHAR} and l.grade_state='y'
	</select>
	<select id="selectByActId" parameterType="java.lang.Integer" resultMap="ResultMap1">
		SELECT 
		DISTINCT l. CODE code,l.COURSE_ID courseId
		FROM tom_course_learning_record l
		LEFT JOIN tom_activity_emps_relation er  ON l. CODE = er. CODE 
		LEFT JOIN tom_activity_property tp ON tp.activity_id = er.activity_id and tp.COURSE_ID is not null and l.COURSE_ID = tp.COURSE_ID
		where tp.activity_id = #{activityId,jdbcType=DECIMAL}
	</select>
	<select id="selectByActCode" parameterType="map" resultMap="ResultMap1">
	  SELECT g.code CODE, COUNT( g.course_id) totalTask,count(if(g.GRADE_STATE is not null ,true,null)) completedTask from(
				SELECT s.*,lr.LEARNING_DATE GRADE_STATE,LEARNING_DATE time FROM(
				SELECT a.ACTIVITY_ID,a.`CODE`,ap.COURSE_ID COURSE_ID from
				(select DISTINCT ACTIVITY_ID,CODE from tom_activity_emps_relation emp where emp.APPLY_STATUS="y" AND EMP.`CODE`=#{code,jdbcType=VARCHAR} AND  EMP.ACTIVITY_ID=#{activityId,jdbcType=DECIMAL} ORDER BY code)a
				JOIN tom_activity_property ap on ap.ACTIVITY_ID = a.ACTIVITY_ID  and ap.COURSE_ID is not null  
				group by a.ACTIVITY_ID,a.`CODE`,ap.COURSE_ID) s
				LEFT JOIN  tom_course_learning_record lr on lr.`CODE` = s.`CODE` and lr.COURSE_ID = s.COURSE_ID  -- and lr.LEARNING_DATE is not NULL
				UNION  
				SELECT s.*,es.GRADE_STATE,aa.RETAKING_EXAM_END_TIME time FROM
				(SELECT a.ACTIVITY_ID,a.`CODE`,ap.EXAM_ID COURSE_ID from
				(select DISTINCT ACTIVITY_ID,CODE from tom_activity_emps_relation emp where emp.APPLY_STATUS="y"   AND emp.`CODE`=#{code,jdbcType=VARCHAR} AND  EMP.ACTIVITY_ID=#{activityId,jdbcType=DECIMAL} ORDER BY code)a
				JOIN tom_activity_property ap on ap.ACTIVITY_ID = a.ACTIVITY_ID  and ap.EXAM_ID is not null
				group by a.ACTIVITY_ID,a.`CODE`,ap.EXAM_ID) s
				LEFT JOIN tom_exam_score es on es.`CODE` = s.`CODE` and es.EXAM_ID = s.COURSE_ID  and es.GRADE_STATE="y"
				left join tom_retaking_exam as aa on s.COURSE_ID=aa.exam_id  and aa.sort=0 									
)g
	</select>
</mapper>
