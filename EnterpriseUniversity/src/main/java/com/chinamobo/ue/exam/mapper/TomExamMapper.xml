<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.chinamobo.ue.exam.dao.TomExamMapper">
	<resultMap id="BaseResultMap" type="com.chinamobo.ue.exam.entity.TomExam">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<id column="EXAM_ID" property="examId" jdbcType="DECIMAL" />
		<result column="EXAM_NUMBER" property="examNumber" jdbcType="VARCHAR" />
		<result column="EXAM_NAME" property="examName" jdbcType="VARCHAR" />
		<result column="EXAM_NAME_EN" property="examNameEn" jdbcType="VARCHAR" />
		<result column="BEGIN_TIME" property="beginTime" jdbcType="TIMESTAMP" />
		<result column="END_TIME" property="endTime" jdbcType="TIMESTAMP" />
		<result column="EXAM_PAPER_ID" property="examPaperId" jdbcType="DECIMAL" />
		<result column="EXAM_TIME" property="examTime" jdbcType="DECIMAL" />
		<result column="RETAKING_EXAM_COUNT" property="retakingExamCount" jdbcType="DECIMAL" />
		<result column="EXAM_COUNT" property="remainingCount" jdbcType="DECIMAL" />
		<result column="EXAM_TYPE" property="examType" jdbcType="VARCHAR" />
		<result column="OFFLINE_EXAM" property="offlineExam" jdbcType="VARCHAR" />
		<result column="ADMINS" property="admins" jdbcType="VARCHAR" />
		<result column="ADMIN_NAMES" property="adminNames" jdbcType="VARCHAR" />
		<result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
		<result column="CREATOR" property="creator" jdbcType="VARCHAR" />
		<result column="CREATOR_ID" property="creatorId" jdbcType="VARCHAR" />
		<result column="LAST_OPERATOR" property="lastOperator" jdbcType="VARCHAR" />
		<result column="LAST_OPERATOR_ID" property="lastOperatorId" jdbcType="VARCHAR" />
		<result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="EXAM_ADDRESS" property="examAddress" jdbcType="VARCHAR" />
		<result column="EXAM_ADDRESS_EN" property="examAddressEn" jdbcType="VARCHAR" />
		<result column="IS_CN" property="isCN" jdbcType="VARCHAR" />
		<result column="IS_EN" property="isEN" jdbcType="VARCHAR" />
		<result column="ACTIVITY_ID" property="activityId" jdbcType="DECIMAL" />
		<result column="ACTIVITY_NAME" property="activityName" jdbcType="VARCHAR" />
		<result column="GRADE_STATE" property="gradeState" jdbcType="VARCHAR" />
		<result column="PARENT_CLASSIFY_ID" property="parentClassifyId" jdbcType="DECIMAL" />
		<result column="PARENT_PROJECT_CLASSIFY_NAME" property="parentProjectClassifyName" jdbcType="VARCHAR" />
     	<result column="SECTION_TYPES" property="sectionTypes" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="ExamAnswerResultMap"
		type="com.chinamobo.ue.statistics.entity.ExamAnswerDto">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<id column="EXAM_ID" property="examId" jdbcType="DECIMAL" />
		<result column="CODE" property="code" jdbcType="VARCHAR" />
		<result column="EXAM_NAME" property="examName" jdbcType="VARCHAR" />
		<result column="NAME" property="name" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="VARCHAR" />
		<result column="topicId" property="topicId" jdbcType="DECIMAL" />
		<result column="topicName" property="topicName" jdbcType="VARCHAR" />
		<result column="allOption" property="allOption" jdbcType="VARCHAR" />
		<result column="rightOption" property="rightOption" jdbcType="VARCHAR" />
		<result column="answer" property="answer" jdbcType="VARCHAR" />
		<result column="isRight" property="isRight" jdbcType="VARCHAR" />
	</resultMap>
	
	
	<resultMap id="ExamStatisticsMap"
		type="com.chinamobo.ue.statistics.entity.TomExamStatistics">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<id column="EXAM_ID" property="examId" jdbcType="DECIMAL" />
		<result column="EXAM_NAME" property="examName" jdbcType="VARCHAR" />
		<result column="BEGIN_TIME" property="beginTime" jdbcType="TIMESTAMP" />
		<result column="END_TIME" property="endTime" jdbcType="TIMESTAMP" />
		<result column="EXAM_TYPE" property="examType" jdbcType="VARCHAR" />
		<result column="PLAN_NUM" property="planNum" jdbcType="VARCHAR" />
		<result column="REAL_NUM" property="realNum" jdbcType="VARCHAR" />
		<result column="PASS_NUM" property="passNum" jdbcType="VARCHAR" />
		<result column="PASS_RATE" property="passRate" jdbcType="VARCHAR" />
		<result column="ALL_POINTS" property="allPoints" jdbcType="VARCHAR" />
		<result column="AVERAGE_SCORE" property="averageScore" jdbcType="DOUBLE" />
	</resultMap>
	
	
	
	<sql id="Base_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		EXAM_ID, EXAM_NUMBER, EXAM_NAME,EXAM_NAME_EN, BEGIN_TIME, END_TIME, EXAM_PAPER_ID,
		EXAM_TIME,
		RETAKING_EXAM_COUNT, EXAM_TYPE, OFFLINE_EXAM, ADMINS,
		CREATE_TIME, CREATOR, LAST_OPERATOR,
		UPDATE_TIME,EXAM_ADDRESS,EXAM_ADDRESS_EN,CREATOR_ID,IS_CN,IS_EN
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		select
		<include refid="Base_Column_List" />
		from TOM_EXAM
		where EXAM_ID = #{examId,jdbcType=DECIMAL}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		delete from TOM_EXAM
		where EXAM_ID = #{examId,jdbcType=DECIMAL}
	</delete>
	<insert id="insert" useGeneratedKeys="true" keyProperty="examId"
		parameterType="com.chinamobo.ue.exam.entity.TomExam">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		insert into TOM_EXAM ( EXAM_NUMBER, EXAM_NAME,
		BEGIN_TIME, END_TIME,
		EXAM_PAPER_ID,
		EXAM_TIME, RETAKING_EXAM_COUNT, EXAM_TYPE,
		OFFLINE_EXAM,
		ADMINS, CREATE_TIME,
		CREATOR, LAST_OPERATOR, UPDATE_TIME,CREATOR_ID,IS_CN,IS_EN
		)
		<!-- EXAM_SEQ.nextval, -->
		values ( #{examNumber,jdbcType=VARCHAR},
		#{examName,jdbcType=VARCHAR},
		#{beginTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP},
		#{examPaperId,jdbcType=DECIMAL},
		#{examTime,jdbcType=DECIMAL},
		#{retakingExamCount,jdbcType=DECIMAL},
		#{examType,jdbcType=VARCHAR},
		#{offlineExam,jdbcType=VARCHAR}, #{admins,jdbcType=VARCHAR},
		#{createTime,jdbcType=TIMESTAMP},
		#{creator,jdbcType=VARCHAR},
		#{lastOperator,jdbcType=VARCHAR},
		#{updateTime,jdbcType=TIMESTAMP},#{creatorId,jdbcType=VARCHAR}
		,#{isCN,jdbcType=VARCHAR},#{isEN,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" useGeneratedKeys="true"
		keyProperty="examId" parameterType="com.chinamobo.ue.exam.entity.TomExam">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<!-- <selectKey resultType="INTEGER" order="BEFORE" keyProperty="examId"> -->
		<!-- SELECT EXAM_SEQ.NEXTVAL as examId from DUAL -->
		<!-- </selectKey> -->
		insert into TOM_EXAM
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<!-- EXAM_ID, -->
			<if test="examNumber != null">
				EXAM_NUMBER,
			</if>
			<if test="examName != null">
				EXAM_NAME,
			</if>
			<if test="examNameEn != null">
				EXAM_NAME_EN,
			</if>
			<if test="beginTime != null">
				BEGIN_TIME,
			</if>
			<if test="endTime != null">
				END_TIME,
			</if>
			<if test="examPaperId != null">
				EXAM_PAPER_ID,
			</if>
			<if test="examTime != null">
				EXAM_TIME,
			</if>
			<if test="retakingExamCount != null">
				RETAKING_EXAM_COUNT,
			</if>
			<if test="examType != null">
				EXAM_TYPE,
			</if>
			<if test="offlineExam != null">
				OFFLINE_EXAM,
			</if>
			<if test="admins != null">
				ADMINS,
			</if>
			<if test="adminNames != null">
				ADMIN_NAMES,
			</if>
			<if test="createTime != null">
				CREATE_TIME,
			</if>
			<if test="creator != null">
				CREATOR,
			</if>
			<if test="creatorId != null">
				CREATOR_ID,
			</if>
			<if test="lastOperator != null">
				LAST_OPERATOR,
			</if>
			<if test="lastOperatorId != null">
				LAST_OPERATOR_ID,
			</if>
			<if test="updateTime != null">
				UPDATE_TIME,
			</if>
			<if test="examAddress != null">
				EXAM_ADDRESS,
			</if>
			<if test="examAddressEn != null">
				EXAM_ADDRESS_EN,
			</if>
			<if test="isCN != null">
				IS_CN,
			</if>
			<if test="isEN != null">
				IS_EN,
			</if>
			<if test="parentClassifyId !=null">
				PARENT_CLASSIFY_ID,
			</if>
			<if test="parentProjectClassifyName !=null">
				PARENT_PROJECT_CLASSIFY_NAME,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<!-- #{examId,jdbcType=DECIMAL}, -->
			<if test="examNumber != null">
				#{examNumber,jdbcType=VARCHAR},
			</if>
			<if test="examName != null">
				#{examName,jdbcType=VARCHAR},
			</if>
			<if test="examNameEn != null">
				#{examNameEn,jdbcType=VARCHAR},
			</if>
			<if test="beginTime != null">
				#{beginTime,jdbcType=TIMESTAMP},
			</if>
			<if test="endTime != null">
				#{endTime,jdbcType=TIMESTAMP},
			</if>
			<if test="examPaperId != null">
				#{examPaperId,jdbcType=DECIMAL},
			</if>
			<if test="examTime != null">
				#{examTime,jdbcType=DECIMAL},
			</if>
			<if test="retakingExamCount != null">
				#{retakingExamCount,jdbcType=DECIMAL},
			</if>
			<if test="examType != null">
				#{examType,jdbcType=VARCHAR},
			</if>
			<if test="offlineExam != null">
				#{offlineExam,jdbcType=VARCHAR},
			</if>
			<if test="admins != null">
				#{admins,jdbcType=VARCHAR},
			</if>
			<if test="adminNames != null">
				#{adminNames,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="creator != null">
				#{creator,jdbcType=VARCHAR},
			</if>
			<if test="creatorId != null">
				#{creatorId,jdbcType=VARCHAR},
			</if>
			<if test="lastOperator != null">
				#{lastOperator,jdbcType=VARCHAR},
			</if>
			<if test="lastOperatorId != null">
				#{lastOperatorId,jdbcType=VARCHAR},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="examAddress != null">
				#{examAddress,jdbcType=VARCHAR},
			</if>
			<if test="examAddressEn != null">
				#{examAddressEn,jdbcType=VARCHAR},
			</if>
			<if test="isCN != null">
				#{isCN,jdbcType=VARCHAR},
			</if>
			<if test="isEN != null">
				#{isEN,jdbcType=VARCHAR},
			</if>
			<if test="parentClassifyId != null">
		       #{parentClassifyId,jdbcType=VARCHAR},
	     	 </if>
		      <if test="parentProjectClassifyName != null">
		      #{parentProjectClassifyName,jdbcType=VARCHAR},
		      </if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.chinamobo.ue.exam.entity.TomExam">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		update TOM_EXAM
		<set>
			<if test="examNumber != null">
				EXAM_NUMBER = #{examNumber,jdbcType=VARCHAR},
			</if>
			<if test="examName != null">
				EXAM_NAME = #{examName,jdbcType=VARCHAR},
			</if>
			<if test="examNameEn != null">
				EXAM_NAME_EN = #{examNameEn,jdbcType=VARCHAR},
			</if>
			<if test="beginTime != null">
				BEGIN_TIME = #{beginTime,jdbcType=TIMESTAMP},
			</if>
			<if test="endTime != null">
				END_TIME = #{endTime,jdbcType=TIMESTAMP},
			</if>
			<if test="examPaperId != null">
				EXAM_PAPER_ID = #{examPaperId,jdbcType=DECIMAL},
			</if>
			<if test="examTime != null">
				EXAM_TIME = #{examTime,jdbcType=DECIMAL},
			</if>
			<if test="retakingExamCount != null">
				RETAKING_EXAM_COUNT =
				#{retakingExamCount,jdbcType=DECIMAL},
			</if>
			<if test="examType != null">
				EXAM_TYPE = #{examType,jdbcType=VARCHAR},
			</if>
			<if test="offlineExam != null">
				OFFLINE_EXAM = #{offlineExam,jdbcType=VARCHAR},
			</if>
			<if test="admins != null">
				ADMINS = #{admins,jdbcType=VARCHAR},
			</if>
			<if test="adminNames != null">
				ADMIN_NAMES=#{adminNames,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="creator != null">
				CREATOR = #{creator,jdbcType=VARCHAR},
			</if>
			<if test="creatorId != null">
				CREATOR_ID = #{creatorId,jdbcType=VARCHAR},
			</if>
			<if test="lastOperator != null">
				LAST_OPERATOR = #{lastOperator,jdbcType=VARCHAR},
			</if>
			<if test="lastOperatorId != null">
				LAST_OPERATOR_ID = #{lastOperatorId,jdbcType=VARCHAR},
			</if>
			<if test="updateTime != null">
				UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="examAddress != null">
				EXAM_ADDRESS=#{examAddress,jdbcType=VARCHAR},
			</if>
			<if test="examAddressEn != null">
				EXAM_ADDRESS_EN=#{examAddressEn,jdbcType=VARCHAR},
			</if>
			<if test="isCN != null">
				IS_CN=#{isCN,jdbcType=VARCHAR},
			</if>
			<if test="isEN != null">
				IS_EN=#{isEN,jdbcType=VARCHAR},
			</if>
			<if test="parentClassifyId !=null">
      			PARENT_CLASSIFY_ID= #{parentClassifyId,jdbcType=VARCHAR},
      		</if>
	        <if test="parentProjectClassifyName !=null">
	      		PARENT_PROJECT_CLASSIFY_NAME= #{parentProjectClassifyName,jdbcType=VARCHAR}
      		</if>														
		</set>
		where EXAM_ID = #{examId,jdbcType=DECIMAL}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.chinamobo.ue.exam.entity.TomExam">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		update TOM_EXAM
		set EXAM_NUMBER = #{examNumber,jdbcType=VARCHAR},
		EXAM_NAME_EN = #{examNameEn,jdbcType=VARCHAR},
		EXAM_NAME = #{examName,jdbcType=VARCHAR},
		BEGIN_TIME =
		#{beginTime,jdbcType=TIMESTAMP},
		END_TIME =
		#{endTime,jdbcType=TIMESTAMP},
		EXAM_PAPER_ID =
		#{examPaperId,jdbcType=DECIMAL},
		EXAM_TIME =
		#{examTime,jdbcType=DECIMAL},
		RETAKING_EXAM_COUNT =
		#{retakingExamCount,jdbcType=DECIMAL},
		EXAM_TYPE =
		#{examType,jdbcType=VARCHAR},
		OFFLINE_EXAM =
		#{offlineExam,jdbcType=VARCHAR},
		ADMINS = #{admins,jdbcType=VARCHAR},
		CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
		CREATOR =
		#{creator,jdbcType=VARCHAR},
		LAST_OPERATOR =
		#{lastOperator,jdbcType=VARCHAR},
		IS_CN =
		#{isCN,jdbcType=VARCHAR},
		IS_EN =
		#{isEN,jdbcType=VARCHAR},
		UPDATE_TIME =
		#{updateTime,jdbcType=TIMESTAMP}
		where EXAM_ID =
		#{examId,jdbcType=DECIMAL}
	</update>
	<select id="selectAll" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from TOM_EXAM
	</select>
	<select id="countByExample" parameterType="map" resultType="java.lang.Integer">
		select count(*) from TOM_EXAM where 1=1
		<if test="example.examName != null and '' != example.examName">
			and
			INSTR(EXAM_NAME,#{example.examName,jdbcType=VARCHAR})>0
		</if>
		<if test="example.examPaperId != null and '' != example.examPaperId">
			and EXAM_PAPER_ID =
			#{example.examPaperId,jdbcType=DECIMAL}
		</if>
	</select>
	<select id="findList" resultMap="BaseResultMap" parameterType="map">
		SELECT E.*,A.ACTIVITY_NAME from TOM_EXAM E
		LEFT JOIN tom_activity_property P ON E.EXAM_ID = P.EXAM_ID
		LEFT JOIN tom_activity A ON A.ACTIVITY_ID = P.ACTIVITY_ID 
		where 1=1
		<if test="example.examName != null and '' != example.examName">
			and 
			INSTR(E.EXAM_NAME,#{example.examName,jdbcType=VARCHAR})>0
		</if>
		order by UPDATE_TIME desc
		limit <![CDATA[#{startNum,jdbcType=DECIMAL},#{endNum,jdbcType=DECIMAL}]]>
	</select>
	<select id="countByUser" parameterType="map" resultType="java.lang.Integer">
		select count(*) from(select DISTINCT a.* from TOM_EXAM
		a,TOM_EXAM_SCORE b ,TOM_RETAKING_EXAM c
		where a.EXAM_ID=b.EXAM_ID and
		b.CODE=#{userId,jdbcType=VARCHAR}
		and b.GRADE_STATE !='Y' and a.EXAM_ID
		 in (${ids})
		and c.RETAKING_EXAM_END_TIME <![CDATA[>NOW()]]>
		and
		a.EXAM_ID=c.EXAM_ID and c.SORT=a.RETAKING_EXAM_COUNT
		<if test="example.examName != null and '' != examName">
			and
			INSTR(a.EXAM_NAME,#{example.examName,jdbcType=VARCHAR})>0
		</if>
		<if test="lang== 'cn'">
			and a.is_cn='Y'
		</if>
		<if test="lang== 'en'">
			and a.is_en='Y'
		</if>
		) as b
	</select>
	<select id="selectByUser" resultMap="BaseResultMap"
		parameterType="map">
		select  ACTIVITY_ID,GRADE_STATE,EXAM_COUNT,
		<include refid="Base_Column_List" /> from(
		SELECT DISTINCT a.* ,b.GRADE_STATE,b.EXAM_COUNT ,p.ACTIVITY_ID  from TOM_EXAM a left join tom_activity_property p on p.EXAM_ID = A.EXAM_ID,TOM_EXAM_SCORE b,TOM_RETAKING_EXAM c
		
		where a.EXAM_ID=b.EXAM_ID and b.CODE=#{userId,jdbcType=VARCHAR}
		and
		b.GRADE_STATE !='Y' and  a.EXAM_ID in (${ids})
		and
		c.RETAKING_EXAM_END_TIME <![CDATA[>NOW()]]>
		and a.EXAM_ID=c.EXAM_ID and
		c.SORT=a.RETAKING_EXAM_COUNT
	
		<if test="example.examName != null and '' != example.examName">
			and
			INSTR(a.EXAM_NAME,#{example.examName,jdbcType=VARCHAR})>0
		</if>
		<if test="lang== 'cn'">
			and a.is_cn='Y'
		</if>
		<if test="lang== 'en'">
			and a.is_en='Y'
		</if>
			order by a.UPDATE_TIME desc ) as m
		limit <![CDATA[#{startNum,jdbcType=DECIMAL},#{endNum,jdbcType=DECIMAL}]]>
		
	</select>
	<select id="countMyExam" parameterType="map" resultType="java.lang.Integer">
		select
		count(a.EXAM_ID) from TOM_EXAM a,TOM_EXAM_EMP_ALLOCATION
		b,TOM_EXAM_SCORE c,
		(select EXAM_ID,CODE,MAX(CREATE_TIME) m from
		TOM_EXAM_SCORE GROUP BY
		CODE,EXAM_ID) d
		where a.EXAM_ID=b.EXAM_ID and
		a.EXAM_ID=c.EXAM_ID and a.EXAM_ID=d.EXAM_ID
		and d.CODE=b.CODE and
		c.CODE=b.CODE and
		b.CODE=#{userId,jdbcType=VARCHAR}
		and
		c.CREATE_TIME=d.m and (c.GRADE_STATE=#{gradeState1,jdbcType=VARCHAR}
		or c.GRADE_STATE=#{gradeState2,jdbcType=VARCHAR})
		<if test="lang== 'cn'">
			and a.is_cn='Y'
		</if>
		<if test="lang== 'en'">
			and a.is_en='Y'
		</if>
	</select>
	<select id="selectMyExam" resultMap="BaseResultMap"
		parameterType="map">
		SELECT a.* from TOM_EXAM a,TOM_EXAM_EMP_ALLOCATION b,TOM_EXAM_SCORE c,
		(select EXAM_ID,CODE,MAX(CREATE_TIME) m from TOM_EXAM_SCORE GROUP BY
		CODE,EXAM_ID) d
		where a.EXAM_ID=b.EXAM_ID and a.EXAM_ID=c.EXAM_ID and
		a.EXAM_ID=d.EXAM_ID
		and d.CODE=b.CODE and c.CODE=b.CODE and
		b.CODE=#{userId,jdbcType=VARCHAR}
		and c.CREATE_TIME=d.m and
		(c.GRADE_STATE=#{gradeState1,jdbcType=VARCHAR}
		or
		c.GRADE_STATE=#{gradeState2,jdbcType=VARCHAR})
		<if test="lang== 'cn'">
			and a.is_cn='Y'
		</if>
		<if test="lang== 'en'">
			and a.is_en='Y'
		</if>
		order by a.UPDATE_TIME
		desc
		limit <![CDATA[#{startNum,jdbcType=DECIMAL},#{endNum,jdbcType=DECIMAL}]]>
	</select>
	<select id="selectByPackageId" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		te.exam_id
		from tom_task_package ttp join
		tom_task_exam_relation tter on
		ttp.package_id = tter.package_id
		left
		join tom_exam te on tter.exam_id = te.exam_id where 1=1
		and
		ttp.package_id =#{packageId}
	</select>
	<select id="selectByExamPaperId" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select * from TOM_EXAM where EXAM_PAPER_ID =
		#{examPaperId,jdbcType=DECIMAL}
	</select>
	<select id="countByUserGlobel" parameterType="map" resultType="java.lang.Integer">
		select count(*) from(select DISTINCT a.* from TOM_EXAM
		a,TOM_EXAM_SCORE b ,TOM_RETAKING_EXAM c
		where a.EXAM_ID=b.EXAM_ID 
		<if test="lang== 'cn'">
			and a.is_cn='Y'
		</if>
		<if test="lang== 'en'">
			and a.is_en='Y'
		</if>
		 and
		b.CODE=#{userId,jdbcType=VARCHAR}
		and a.EXAM_ID=c.EXAM_ID and
		c.SORT=a.RETAKING_EXAM_COUNT
		<if test="example.examName != null and '' != examName">
			and
			INSTR(a.EXAM_NAME,#{example.examName,jdbcType=VARCHAR})>0
		</if>
		<if test="example.examNameEn != null and '' != examNameEn">
			and
			INSTR(a.EXAM_NAME_EN,#{example.examNameEn,jdbcType=VARCHAR})>0
		</if>
		)as a
	</select>
	<select id="selectByUserGlobel" resultMap="BaseResultMap"
		parameterType="map">
		select
		<include refid="Base_Column_List" />from(
		SELECT DISTINCT a.* from TOM_EXAM a,TOM_EXAM_SCORE b,TOM_RETAKING_EXAM
		c
		where a.EXAM_ID=b.EXAM_ID 
		<if test="lang== 'cn'">
			and a.is_cn='Y'
		</if>
		<if test="lang== 'en'">
			and a.is_en='Y'
		</if>
		and b.CODE=#{userId,jdbcType=VARCHAR}
		and
		a.EXAM_ID=c.EXAM_ID and c.SORT=a.RETAKING_EXAM_COUNT
		<if test="example.examName != null and '' != example.examName">
			and
			INSTR(a.EXAM_NAME,#{example.examName,jdbcType=VARCHAR})>0
		</if>
		<if test="example.examNameEn != null and '' != example.examNameEn">
			and
			INSTR(a.EXAM_NAME_EN,#{example.examNameEn,jdbcType=VARCHAR})>0
		</if>
		) as n
		order by UPDATE_TIME desc
		limit <![CDATA[#{startNum,jdbcType=DECIMAL},#{endNum,jdbcType=DECIMAL}]]>
		
	</select>
	<!-- 考试统计的条数和列表分页查询 -->
	<select id="selectBycount" resultType="int" parameterType="map">
		SELECT
		count(*)
		FROM
		tom_exam tbM
		LEFT JOIN
		(
		SELECT
		exam_id,
		COUNT(code) AS
		plan_num
		FROM
		tom_exam_emp_allocation
		GROUP BY
		exam_id
		)
		tbPlan
		ON
		tbM.exam_id=tbPlan.exam_id
		LEFT JOIN
		(
		SELECT
		exam_id,
		COUNT( DISTINCT
		code) AS real_num
		FROM
		tom_exam_answer_details
		GROUP BY
		exam_id
		)
		tbReal
		ON
		tbM.exam_id=tbReal.exam_id
		LEFT JOIN
		(
		SELECT
		exam_id,
		COUNT(DISTINCT CODE)
		AS pass_num
		FROM
		tom_exam_score
		WHERE
		grade_state='Y'
		GROUP BY
		exam_id
		)
		tbPass
		ON
		tbM.exam_id=tbPass.exam_id
		LEFT JOIN
		(
		SELECT
		tbAllScore.exam_id,
		SUM(max_per_Points) AS all_points
		FROM
		(
		SELECT
		exam_id,
		MAX(total_points)
		AS max_per_Points ,
		code
		FROM
		tom_exam_score
		GROUP BY
		exam_id,
		code
		)
		tbAllScore
		GROUP BY
		tbAllScore.exam_id
		)
		tbAllPoints
		ON
		tbM.exam_id=tbAllPoints.exam_id
		WHERE
		1=1
		AND tbM.exam_id IN
		(
		SELECT
		tbA.exam_id
		FROM
		(
		SELECT
		exam_id,
		MAX(retaking_exam_end_time),
		MAX(sort)
		FROM
		tom_retaking_exam
		WHERE
		1=1
		GROUP BY
		exam_id
		ORDER BY
		exam_id DESC
		)
		tbA,
		(
		SELECT
		exam_id
		FROM
		tom_exam_score
		WHERE
		grade_state!='P'
		GROUP BY
		exam_id
		ORDER BY
		exam_id DESC
		)
		tbB
		WHERE
		tbA.exam_id=tbB.exam_id
		)
		<if test="examName != null and '' != examName ">
			AND INSTR(tbM.EXAM_NAME,#{examName,jdbcType=VARCHAR})>0
		</if>
		<if test="beginTimeq != null and '' != beginTimeq">
		AND #{beginTimeq,jdbcType=TIMESTAMP} <![CDATA[<tbM.begin_time]]>
		</if>
		<if test="endTimeq != null and '' != endTimeq">
		and
		#{endTimeq,jdbcType=TIMESTAMP} <![CDATA[>tbM.end_time]]>
		</if>
	</select>
	<select id="selectByList"
		resultMap="ExamStatisticsMap"
		parameterType="map">
		SELECT
		tbM.exam_id AS EXAM_ID,
		tbM.exam_name AS EXAM_NAME,
		tbM.begin_time AS BEGIN_TIME,
		tbM.end_time AS END_TIME,
		tbM.exam_type as EXAM_TYPE,
		tbM.CREATE_TIME as createTime,
		ifnull(tbPlan.plan_num,0) AS plan_num,
		ifnull(tbReal.real_num,0) AS
		real_num,
		ifnull(tbPass.pass_num,0) AS pass_num,
		ifnull(tbAllPoints.all_points,0) AS all_points,
		ifnull(IF(isnull(REAL_NUM),PASS_NUM,0)/ifnull(REAL_NUM,1),0) AS
		PASS_RATE,
		ifnull(IF(isnull(REAL_NUM),ALL_POINTS,0)/ifnull(REAL_NUM,1),0) AS
		AVERAGE_SCORE
		FROM
		tom_exam tbM
		LEFT JOIN
		(
		SELECT
		exam_id,
		COUNT(code) AS
		plan_num
		FROM
		tom_exam_emp_allocation
		GROUP BY
		exam_id
		)
		tbPlan
		ON
		tbM.exam_id=tbPlan.exam_id
		LEFT JOIN
		(
		select EXAM_ID,COUNT(DISTINCT CODE) AS real_num
		from tom_exam_score
		where grade_state != 'D' and exam_count >0
		GROUP BY
		exam_id
		)
		tbReal
		ON
		tbM.exam_id=tbReal.exam_id
		LEFT JOIN
		(
		SELECT
		exam_id,
		COUNT(DISTINCT CODE)
		AS pass_num
		FROM
		tom_exam_score
		WHERE
		grade_state='Y'
		GROUP BY
		exam_id
		)
		tbPass
		ON
		tbM.exam_id=tbPass.exam_id
		LEFT JOIN
		(
		SELECT
		tbAllScore.exam_id,
		SUM(max_per_Points) AS all_points
		FROM
		(
		SELECT
		exam_id,
		MAX(total_points)
		AS max_per_Points ,
		code
		FROM
		tom_exam_score
		GROUP BY
		exam_id,
		code
		)
		tbAllScore
		GROUP BY
		tbAllScore.exam_id
		)
		tbAllPoints
		ON
		tbM.exam_id=tbAllPoints.exam_id
		WHERE
<!-- 		tbM.end_time <![CDATA[<NOW()]]> -->
<!-- 		AND  -->
		tbM.exam_id IN
		(
		SELECT
		tbA.exam_id
		FROM
		(
		SELECT
		exam_id,
		MAX(retaking_exam_end_time),
		MAX(sort)
		FROM
		tom_retaking_exam
<!-- 		WHERE -->
<!-- 		retaking_exam_end_time <![CDATA[<NOW()]]> -->
		GROUP BY
		exam_id
		ORDER BY
		exam_id DESC
		)
		tbA,
		(
		SELECT
		exam_id
		FROM
		tom_exam_score
		WHERE
		grade_state!='P'
		GROUP BY
		exam_id
		ORDER BY
		exam_id DESC
		)
		tbB
		WHERE
		tbA.exam_id=tbB.exam_id
		)
		<if test="examName != null and '' != examName ">
			AND INSTR(tbM.EXAM_NAME,#{examName,jdbcType=VARCHAR})>0
		</if>
		<if test="beginTimeq != null and '' != beginTimeq">
		AND #{beginTimeq,jdbcType=TIMESTAMP} <![CDATA[<= tbM.begin_time]]>
		</if>
		<if test="endTimeq != null and '' != endTimeq">
		and
		#{endTimeq,jdbcType=TIMESTAMP} <![CDATA[>= tbM.begin_time]]>
		</if>
		order by   tbM.end_time DESC
		limit <![CDATA[#{startNum,jdbcType=DECIMAL},#{endNum,jdbcType=DECIMAL}]]>
	</select>
	<!-- 根据codes查询 -->
	<select id="selectByCodes" resultMap="ExamStatisticsMap" parameterType="map">
	SELECT
		tbM.exam_id AS EXAM_ID,
		tbM.exam_name AS EXAM_NAME,
		tbM.begin_time AS BEGIN_TIME,
		tbM.end_time AS END_TIME,
		tbM.exam_type as EXAM_TYPE,
		ifnull(tbPlan.plan_num,0) AS plan_num,
		ifnull(tbReal.real_num,0) AS
		real_num,
		ifnull(tbPass.pass_num,0) AS pass_num,
		ifnull(tbAllPoints.all_points,0) AS all_points,
		ifnull(IF(isnull(REAL_NUM),PASS_NUM,0)/ifnull(REAL_NUM,1),0) AS
		PASS_RATE,
		ifnull(IF(isnull(REAL_NUM),ALL_POINTS,0)/ifnull(REAL_NUM,1),0) AS
		AVERAGE_SCORE
		FROM
		tom_exam tbM
		LEFT JOIN
		(
		SELECT
		exam_id,
		COUNT(code) AS
		plan_num
		FROM
		tom_exam_emp_allocation
		GROUP BY
		exam_id
		)
		tbPlan
		ON
		tbM.exam_id=tbPlan.exam_id
		LEFT JOIN
		(
		SELECT
		exam_id,
		COUNT( DISTINCT
		code) AS real_num
		FROM
		tom_exam_answer_details
		GROUP BY
		exam_id
		)
		tbReal
		ON
		tbM.exam_id=tbReal.exam_id
		LEFT JOIN
		(
		SELECT
		exam_id,
		COUNT(DISTINCT CODE)
		AS pass_num
		FROM
		tom_exam_score
		WHERE
		grade_state='Y'
		GROUP BY
		exam_id
		)
		tbPass
		ON
		tbM.exam_id=tbPass.exam_id
		LEFT JOIN
		(
		SELECT
		tbAllScore.exam_id,
		SUM(max_per_Points) AS all_points
		FROM
		(
		SELECT
		exam_id,
		MAX(total_points)
		AS max_per_Points ,
		code
		FROM
		tom_exam_score
		GROUP BY
		exam_id,
		code
		)
		tbAllScore
		GROUP BY
		tbAllScore.exam_id
		)
		tbAllPoints
		ON
		tbM.exam_id=tbAllPoints.exam_id
		WHERE
<!-- 		tbM.end_time <![CDATA[<NOW()]]> -->
<!-- 		AND  -->
		tbM.exam_id IN
		(
		SELECT
		tbA.exam_id
		FROM
		(
		SELECT
		exam_id,
		MAX(retaking_exam_end_time),
		MAX(sort)
		FROM
		tom_retaking_exam
<!-- 		WHERE -->
<!-- 		retaking_exam_end_time <![CDATA[<NOW()]]> -->
		GROUP BY
		exam_id
		ORDER BY
		exam_id DESC
		)
		tbA,
		(
		SELECT
		exam_id
		FROM
		tom_exam_score
		WHERE
		grade_state!='P'
		GROUP BY
		exam_id
		ORDER BY
		exam_id DESC
		)
		tbB
		WHERE
		tbA.exam_id=tbB.exam_id
		)
		and tbM.exam_id in
		<foreach collection="Ids" item="item" index="index"  open="(" separator="," close=")">
		 #{item}
	    </foreach>
	    order by   tbM.end_time DESC
	</select>
	<!-- 考试统计详细信息的条数和列表分页查询 -->
	<select id="selectEmployeeBycount" resultType="int"
		parameterType="map">
		SELECT count(*) from TOM_VI_EXAM_EMP_DETAIL WHERE
		EXAM_ID=#{examId,jdbcType=DECIMAL}
	</select>
	<!-- 实际参加考试统计详细信息的条数和列表分页查询 -->
	<select id="selectRealEmployeeBycount" resultType="int"
		parameterType="map">
		SELECT count(*) from TOM_VI_EXAM_EMP_DETAIL WHERE
		EXAM_ID=#{examId,jdbcType=DECIMAL} and EXAM_COUNT!='0'
	</select>
	
	<select id="selectEmployeeByList"
		resultType="com.chinamobo.ue.statistics.entity.TomExamEmployeeStatistics"
		parameterType="map">
		select
		c.exam_id as examId,
		c.code as code,
		c.EMP_NAME AS empName,
		c.MOBILE as mobile,
		c.EMAIL AS email,
		c.ONEDEPTNAME AS onedeptname,
		c.DEPTNAME AS deptname,
		c.TOTAL_POINTS AS totalPoints,
		c.GRADE_STATE AS
		gradeState,
		c.EXAM_COUNT AS examCount
		from TOM_VI_EXAM_EMP_DETAIL c
		where 1=1
		AND c.EXAM_ID=#{examId,jdbcType=DECIMAL}
		limit <![CDATA[#{startNum,jdbcType=DECIMAL},#{endNum,jdbcType=DECIMAL}]]>
	</select>
	<select id="selectAnswerDto" resultMap="ExamAnswerResultMap"
		parameterType="int">
		SELECT
		A .EXAM_NAME examName,
		b.code,
		b. NAME,
		c.topic_ID
		topicId,
		DECODE (
		D .QUESTION_TYPE,
		'1',
		'单选',
		'2',
		'多选',
		'3',
		'填空',
		'4',
		'简答',
		'5',
		'判断'
		) TYPE,
		c.TOPIC topicName,
		DECODE (D .QUESTION_TYPE,
		'1',
		c.EMP_ANSWER,
		'2',
		c.EMP_ANSWER,
		'3',
		c.SUBJECTIVE_ITEM_ANSWER,
		'4',
		c.SUBJECTIVE_ITEM_ANSWER,
		'5',
		c.EMP_ANSWER) answer,
		DECODE
		(c.RIGHT_STATE,'Y','正确','错误') isRight
		FROM
		TOM_EXAM A,
		TOM_EMP b,
		TOM_EXAM_ANSWER_DETAILS c,
		TOM_TOPIC D
		WHERE
		c.EXAM_ID = A .exam_id
		AND A
		.EXAM_ID = 11
		AND c.SCORE = 0
		AND b.code = c.code
		AND c.topic_id = D
		.topic_id
	</select>
	
	
	<select id="selectRealEmployeeByList"
		resultType="com.chinamobo.ue.statistics.entity.TomExamEmployeeStatistics"
		parameterType="map">
		select
		c.exam_id as examId,
		c.code as code,
		c.EMP_NAME AS empName,
		c.MOBILE as mobile,
		c.EMAIL AS email,
		c.ONEDEPTNAME AS onedeptname,
		c.DEPTNAME AS deptname,
		c.TOTAL_POINTS AS totalPoints,
		c.GRADE_STATE AS
		gradeState,
		c.EXAM_COUNT AS examCount
		from TOM_VI_EXAM_EMP_DETAIL c
		where 1=1
		AND c.EXAM_ID=#{examId,jdbcType=DECIMAL} and c.EXAM_COUNT !='0'
		limit <![CDATA[#{startNum,jdbcType=DECIMAL},#{endNum,jdbcType=DECIMAL}]]>
	</select>
	<select id="selectempExamlistBypage" resultType="com.chinamobo.ue.exam.dto.ExamDto" parameterType="map"> 
		select es.code,es.emp_name empName, es.exam_id examId,e.exam_name examName,e.begin_time startDate,e.end_time endDate,es.total_points totalpoints,
		es.grade_state gradeState from tom_exam_score es join  tom_exam e on es.exam_id = e.exam_id  and es.code = #{code,jdbcType=DECIMAL}
		limit <![CDATA[
	    #{startNum,jdbcType=DECIMAL},#{endNum,jdbcType=DECIMAL}]]>
	</select>
	<select id="countempExamlist" resultType="int" parameterType="map"> 
		select count(*) from tom_exam_score es join  tom_exam e on es.exam_id = e.exam_id  and es.code = #{code,jdbcType=DECIMAL}
	</select>
</mapper>